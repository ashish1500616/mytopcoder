class TheBlackJackDivTwo{
public:
	int score(vector<string> cards)
	{
		int n=sz(cards);
		int res=0;
		for(int i=0;i<n;i++)
		{
			if(cards[i][0]=='A')
			  res+=11;
			else if(cards[i][0]=='K' || cards[i][0]=='Q' || cards[i][0]=='J' || cards[i][0]=='T')
			  res+=10;
			else 
			  res+=cards[i][0]-'0';
		}
		return res;
	}
};

class TheCardShufflingDivTwo{
public:
	int shuffle(int n, int m){
		stack<int> m;
		stack<int> l;
		stack<int> r;
		for(int i=n;i>=1;i--)
		  m.push(i);

		for(int k=0;k<m;k++)
		{
			for(int i=0;i<n;i++)
			{
				if(i%2==0)
				{
					l.push(m.top());
					m.pop();
				}
				else{
					r.push(m.top());
					m.pop();
				}
			}

			for(int i=0;i<sz(l);i++)
			{
				m.push(l.top());
				l.pop();
			}
			for(int i=0;i<sz(r);i++)
			{
				m.push(r.top());
				r.pop();
			}
		}
		int res=0;
		res=m.top();
		return res;
	}
};



int c[52];
int g[52][52];
int N;
class TheCardLineDivTwo{
public:
	vi getnei(int i)
	{
		vi nei;
		for(int j=0;j<52;j++) if(g[i][j])
		  nei.pb(j);
		return nei;
	}
	int go1(stack<int> vis)
	{
		if(vis.size()==N)
		  return 0;
		int cur=vis.top();
		vi cur_nei=getnei(cur);
		if(sz(cur_nei)==0) return -1;
		int tmp=0;
		for(int i=0;i<sz(cur_nei);i++)
		{
			stack<int> nn=vis;
			nn.push(cur_nei[i]); 
			int tt=go1(nn);
			if(tt!=-1)
			  tmp+=tt;
		}
		if(tmp==0)
		  return -1;
		else 
		  return tmp;
	}
		

	int count(vector <string> cards)
	{
		N=sz(cards);
		memset(c,-1,sizeof(c));
		memset(g,-1,sizeof(g));
		for(int i=0;i<sz(cards);i++)
		{
			int color=0;
			if(cards[i][1]=='S')
			  color=0;
			if(cards[i][1]=='C')
			  color=13;
			if(cards[i][1]=='D')
			  color=13*2;
			if(cards[i][1]=='H')
			  color=13*3;
			int num=0;
			if(cards[i][0]=='T')
			  num=8;
			else if(cards[i][0]=='J')
			  num=9;
			else if(cards[i][0]=='Q')
			  num=10;
			else if(cards[i][0]=='K')
			  num=11;
			else if(cards[i][0]=='A')
			  num=12;
			else 
			  num=cards[i][0]-'0'-2;
			c[color+num]=1;
		}
		for(int i=0;i<52;i++) if(c[1])
		{
			int color=i/13;
			for(int j=color*13;j<color*13+13;j++) if(c[j])
			{
				g[i][j]=1;
			}
			int num=i%13;
			for(int j=num;j<52;j+=13) if(i!=j && c[j])
			{
				g[i][j]=1;
			}
		}

		//
		int res=0;
		for(int i=0;i<52;i++)if(c[i])
		{
			stack<int> vis;
			vis.push(i);
			int tmp=go1(vis);
			if(tmp!=-1)
			  res+=tmp;
		}
		if(res==0)
		  res=-1;
		return res;
	}
};

			








