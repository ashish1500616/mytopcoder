#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <iostream>
#include <sstream>
#include <string>
#include <utility>
#include <vector>
#include <queue>
using namespace std;
#define REP(i,n) for(int _n=n, i=0;i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)
const int INF = 1000000000;
template<class T> inline int size(const T&c) { return c.size(); }
 
int sx,sy;
char board[64][64];
 
int parknr[64][64];
 
int ncars;
int npark;
int dist[128][128]; // INF
int edge[128][128];
 
int ddd[64][64];
 
void bfs(int startx,int starty,int d[]) {
  FOR(x,0,sx+1) FOR(y,0,sy+1) ddd[x][y]=INF;
  ddd[startx][starty] = 0;
  queue<int> q; q.push(startx*100 + starty);
  while(!q.empty()) {
    int qf = q.front(); q.pop();
    int x = qf / 100; int y = qf%100;
    int d = ddd[x][y];
#define AAA(x2,y2) { \
  if(board[x2][y2]!='X' && ddd[x2][y2]==INF) {\
    ddd[x2][y2] = d+1; q.push((x2)*100 + (y2)); \
  } \
}
    AAA(x-1,y); AAA(x,y-1); AAA(x+1,y); AAA(x,y+1);
#undef AAA
  }
  FOR(x,1,sx) FOR(y,1,sy) if(board[x][y]=='P') d[parknr[x][y]] = ddd[x][y];
}
 
int match1[128],match2[128];
int vis1[128], vis2[128];
int nmatch = 0;
 
bool dfs(int c) {
  vis1[c] = 1;
  REP(p,npark) if(edge[c][p] && !vis2[p]) {
    vis2[p] = true;
    int c2 = match2[p];
    if(c2==-1) {
      match2[p] = c; match1[c]=p; return true;
    }
    else {
      if(!vis1[c2] && dfs(c2)) {
        match2[p] = c; match1[c]=p; return true;
      }
    }
  }
  return false;
}
 
bool pushflow() {
  REP(c,ncars) vis1[c]=0;
  REP(p,npark) vis2[p]=0;
  REP(c,ncars) if(match1[c]==-1 && !vis1[c] && dfs(c)) return true;
  return false;
}
 
int calc() {
  vector<int> edges;
  REP(c,ncars) REP(p,npark) if(dist[c][p]<INF)
    edges.push_back((dist[c][p]<<16) + (c<<8) + p);
  sort(edges.begin(),edges.end());
 
  REP(c,ncars) REP(p,npark) edge[c][p]=0;
  REP(c,ncars) match1[c]=-1;
  REP(p,npark) match2[p]=-1;
  nmatch = 0;
  
  int poz = 0;
  while(poz < size(edges)) {
    int d = edges[poz]>>16;
    int q = poz;
    while(q<size(edges) && (edges[q]>>16)==d) ++q;
    for(int i=poz;i<q;++i) {
      int a = edges[i]&0xFFFF;
      edge[a>>8][a&255] = 1;
    }
    while(pushflow()) ++nmatch;
    if(nmatch==ncars) return d;
    poz = q;
  }
  return -1;
}
 
struct Parking {
 
  // MAIN
  int minTime(vector <string> parkmap) {
    sy = size(parkmap); sx = size(parkmap[0]);
    FOR(x,0,sx+1) FOR(y,0,sy+1) board[x][y]='X';
    FOR(x,1,sx) FOR(y,1,sy) board[x][y] = parkmap[y-1][x-1];
    npark = 0;
    FOR(x,1,sx) FOR(y,1,sy) if(board[x][y]=='P') parknr[x][y]=npark++;
    ncars = 0;
    FOR(x,1,sx) FOR(y,1,sy) if(board[x][y]=='C') {
      bfs(x,y,dist[ncars]);
      ++ncars;
    }
    if(ncars==0) return 0;
    if(ncars>npark) return -1;
    return calc();
  }
 
};
