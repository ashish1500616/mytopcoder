map<string,int> mp;
 
struct GroceryBagger {
int minimumBags( int strength, vector <string> itemType ) 
{
    int r = 0;
    fu(i,itemType.size()) mp[itemType[i]]++;
    
    for( map<string,int>::iterator it = mp.begin(); it != mp.end(); ++it ) {
        r += (it->second + strength - 1) / strength;
    }
 
    return r;
}
 
};


class FanFailure { 
public: 
vector <int> getRange(vector <int> a, int b) { 
  int i, j, k, x, y, z, n; 
  vector <int> ret; 
  ret.push_back(-1); 
  ret.push_back(-1); 
  sort(a.begin(), a.end()); 
  for( i = 0; i <= a.size(); i++ ) { 
    if( accumulate(a.begin()+i, a.end(), 0) >= b ) 
      ret[0] >?= i; 
    if( accumulate(a.begin(), a.end()-i, 0) >= b ) 
      ret[1] >?= i; 
  } 
  return ret; 
} 
};


class PlayGame {
  public:
  int saveCreatures(vector <int> a, vector <int> b) {
    s(a); s(b);
    int s = 0;
    for (int i = a.si - 1; i >= 0; i--) {
      //if larger
      for (int j = b.si - 1; j >= 0; j--) {
        if (a[i] > b[j]) {
          s += a[i];
          b.erase(b.begin() + j);
          goto hit;
        }
      }
      b.erase(b.end() - 1);
      hit:;
    }
    return s;
  }
};


class SchoolAssembly {
  public:
  int getBeans(int kids, int quantity) {
    int nB = kids*quantity + 4*(quantity-1);
    return (nB+19)/20;
    
  }
};
 

class RockStar { 
  public: 
  int getNumSongs(int ff, int fs, int sf, int ss) { 
    // !FDI 
    if(ff == 0 && fs == 0) return ss + (sf ? 1 : 0); 
    else if(fs == 0) return ff; 
    else if(sf < fs) return ff + ss + (sf+1) + sf; 
    else return ff + ss + fs + fs; 
    } 
  }; 



#define INF 2000000000 
int tcize(int n) {return n<INF ? n : -1;} 

class Apothecary { 
  public: 
  vector <int> balance(int W) { 
    // !FDI 
    vector<int> res; 
    int qty = 1; 
    while(W) { 
      if(W % (qty*3) == 0) ; 
      else if(W % (qty*3) == qty) { 
        W -= qty; 
        res.push_back(qty); 
        } 
      else { 
        W += qty; 
        res.push_back(-qty); 
        } 
      qty *= 3; 
      } 
    sort(res.begin(), res.end()); 
    return res; 
    } 
   
  
  }; 
