class MinimalDifference{
public:
	int findNumber(int A,int B,int C){
		int diff=111111;
		int cd;
		int ret;
		cd=digits(C);
		for(int i=A;i<=B;i++){
			int cur=digits(i);
			if(abs(cur-cd)<diff){
			  ret=i;
			  diff=abs(cur-cd);
			}
		}
		return ret;
		
	}
	int digits(int n){
		int d=0;
		while(n>0){
			d+=n%10;
			n=n/10;
		}
		return d;
	}
};


class WordsGame{
public:
	int n;
	int numSwaps(string os,string word){
		int ret=0;
		for(int i=0;i<n;i++)
		{
			if(os[i]!=word[i])
			{
				for(int j=i;j<n;j++)
					if(os[j]==word[i])
					  swap(os[i],os[j]),ret++;
			}
		}
		return ret;
	}

	int mininumSwaps(vector<string> grid,string word)
	{
		int ret=1000000;
		n=sz(grid);
		vector<string> can;
		string tmp;
		string sortword=word;
		sort(all(sortword));
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<n;j++)
			  tmp+=grid[i][j];
			string sorttmp=tmp;
			sort(all(sorttmp));
		  	if(sortword==sorttmp)
			  can.pb(tmp);
		  	tmp.clear();
		}
		for(int j=0;j<n;j++)
		{
			for(int i=0;i<n;i++)
			  tmp+=grid[i][j];
			string sorttmp=tmp;
			sort(all(sorttmp));
			if(sortword==sorttmp)
			  can.pb(tmp);
			tmp.clear();
		}
		for(int i=0;i<sz(can);i++)
		{
			int cur=numSwaps(can[i],word);
			if(cur<ret)
			  ret=cur;
		}
		if(ret==1000000)
		  ret=-1;
		return ret;
	}
};
			 


