// pparys
#line 5 "HouseProtection.cpp"
#include <string>
#include <vector>
 
#include <cstdio>
#include <vector>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <algorithm>
#include <utility>
#include <sstream>
#include <iostream>
 
using namespace std;
 
#define REP(a,n) for(int a=0; a<(n); ++a)
#define FOR(a,b,c) for(int a=(b); a<=(c); ++a)
#define FORD(a,b,c) for(int a=(b); a>=(c); --a)
#define INIT(a, b) __typeof(b) a = (b)
#define FOREACH(a, b) for(INIT(a, (b).begin()); a!=(b).end(); ++a)
 
#define PB push_back
 
typedef long long LL;
typedef pair<int, int> pii;
typedef vector<string> vs;
typedef vector<int> vi;
 
#define INF 1000000000
 
template<class T>
inline int size(const T&t){return t.size();}
 
//////////////////////////////////////////
 
vi dist2;
 
int edge[50][50], N1, N2;
int vis[50];
int m[50], m2[50];
 
 
bool match_dfs(int c1)
{
  if (vis[c1])
    return 0;
  vis[c1] = 1;
  REP(x, N2)
    if (edge[c1][x] && (m2[x]<0 || match_dfs(m2[x])))
    {
      m[c1] = x;
      m2[x] = c1;
      return 1;
    }
  return 0;
}
 
int match()
{
  int ile = 0;
  REP(a, 50) m[a] = m2[a] = -1;
  REP(a, N1)
    REP(b, N2)
      if (edge[a][b] && m2[b]<0)
      {
        m[a] = b;
        m2[b] = a;
        ++ile;
        break;
      }
  REP(s, N1)
    if (m[s]<0)
    {
      REP(a, N1) vis[a] = 0;
      if (match_dfs(s))
        ++ile;
    }
  return ile;
}
 
class HouseProtection {
  public:
  double safetyFactor(vector <int> X1, vector <int> Y1, vector <int> X2, vector <int> Y2, int R) {
      N1 = size(X1), N2 = size(X2);
      dist2.clear();
      REP(a, N1) REP(b, N2)
      { 
        int d2 = (X1[a]-X2[b])*(X1[a]-X2[b])+(Y1[a]-Y2[b])*(Y1[a]-Y2[b]);
        if (d2<4*R*R)
          dist2.PB(d2);
            }
            dist2.PB(4*R*R);
            sort(dist2.begin(),dist2.end());
            double best = 0;
            REP(dlx, size(dist2))
            {
              int dl = dist2[dlx];
              REP(a, N1) REP(b, N2)
                edge[a][b] = (X1[a]-X2[b])*(X1[a]-X2[b])+(Y1[a]-Y2[b])*(Y1[a]-Y2[b])<dl;
              int ile = N1+N2-match();
              best >?= dl/4.*M_PI*ile;
            }
            return best;
  }
 
 
};
 
 
//ACRush
#include <vector> 
#include <list> 
#include <map> 
#include <set> 
#include <deque> 
#include <queue> 
#include <stack> 
#include <bitset> 
#include <algorithm> 
#include <functional> 
#include <numeric> 
#include <utility> 
#include <sstream> 
#include <iostream> 
#include <iomanip> 
#include <cstdio> 
#include <cmath> 
#include <cstdlib> 
#include <cctype> 
#include <string> 
#include <cstring> 
#include <cstdio> 
#include <cmath> 
#include <cstdlib> 
#include <ctime> 

using namespace std; 

#define SZ(X) ((int)(X.size())) 
const double pi=acos(-1.0); 
template<class T> inline void checkmax(T &a,T b){if(b>a) a=b;} 
template<class T> inline T sqr(T x){return x*x;} 

class HouseProtection 
{ 
public: 
  int n,m; 
  bool G[50][50]; 
  int p[50]; 
  bool visited[50]; 
  bool find(int v) 
  { 
    for (int i=0;i<m;i++) if (G[v][i] && !visited[i]) 
    { 
      visited[i]=true; 
      if (p[i]<0 || find(p[i]))  
      { 
        p[i]=v; 
        return true; 
      } 
    } 
    return false; 
  } 
  int solve(vector<int> X1,vector<int> Y1,vector<int> X2,vector<int> Y2,double R) 
  { 
    for (int i=0;i<n;i++) for (int j=0;j<m;j++) 
      G[i][j]=(sqr(X1[i]-X2[j])+sqr(Y1[i]-Y2[j])<=sqr(R+R)); 
    int result=n+m; 
    memset(p,255,sizeof(p)); 
    for (int i=0;i<n;i++) 
    { 
      memset(visited,false,sizeof(visited)); 
      if (find(i)) result--; 
    } 
    return result; 
  } 
  double safetyFactor(vector <int> X1, vector <int> Y1, vector <int> X2, vector <int> Y2, int R) 
  { 
    n=SZ(X1); 
    m=SZ(X2); 
    double result=0; 
    for (int cnt=1;cnt<=n+m;cnt++) 
    { 
      double H=0,T=R; 
      for (int step=0;step<100;step++) 
      { 
        double M=(H+T)/2.0; 
        if (solve(X1,Y1,X2,Y2,M)>=cnt) H=M; 
        else T=M; 
      } 
      checkmax(result,(double)cnt*sqr(H)); 
    } 
    return result*pi; 
  } 
};
