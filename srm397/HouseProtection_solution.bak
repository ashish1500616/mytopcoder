// pparys
#line 5 "HouseProtection.cpp"
#include <string>
#include <vector>
 
#include <cstdio>
#include <vector>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <algorithm>
#include <utility>
#include <sstream>
#include <iostream>
 
using namespace std;
 
#define REP(a,n) for(int a=0; a<(n); ++a)
#define FOR(a,b,c) for(int a=(b); a<=(c); ++a)
#define FORD(a,b,c) for(int a=(b); a>=(c); --a)
#define INIT(a, b) __typeof(b) a = (b)
#define FOREACH(a, b) for(INIT(a, (b).begin()); a!=(b).end(); ++a)
 
#define PB push_back
 
typedef long long LL;
typedef pair<int, int> pii;
typedef vector<string> vs;
typedef vector<int> vi;
 
#define INF 1000000000
 
template<class T>
inline int size(const T&t){return t.size();}
 
//////////////////////////////////////////
 
vi dist2;
 
int edge[50][50], N1, N2;
int vis[50];
int m[50], m2[50];
 
 
bool match_dfs(int c1)
{
  if (vis[c1])
    return 0;
  vis[c1] = 1;
  REP(x, N2)
    if (edge[c1][x] && (m2[x]<0 || match_dfs(m2[x])))
    {
      m[c1] = x;
      m2[x] = c1;
      return 1;
    }
  return 0;
}
 
int match()
{
  int ile = 0;
  REP(a, 50) m[a] = m2[a] = -1;
  REP(a, N1)
    REP(b, N2)
      if (edge[a][b] && m2[b]<0)
      {
        m[a] = b;
        m2[b] = a;
        ++ile;
        break;
      }
  REP(s, N1)
    if (m[s]<0)
    {
      REP(a, N1) vis[a] = 0;
      if (match_dfs(s))
        ++ile;
    }
  return ile;
}
 
class HouseProtection {
  public:
  double safetyFactor(vector <int> X1, vector <int> Y1, vector <int> X2, vector <int> Y2, int R) {
      N1 = size(X1), N2 = size(X2);
      dist2.clear();
      REP(a, N1) REP(b, N2)
      { 
        int d2 = (X1[a]-X2[b])*(X1[a]-X2[b])+(Y1[a]-Y2[b])*(Y1[a]-Y2[b]);
        if (d2<4*R*R)
          dist2.PB(d2);
            }
            dist2.PB(4*R*R);
            sort(dist2.begin(),dist2.end());
            double best = 0;
            REP(dlx, size(dist2))
            {
              int dl = dist2[dlx];
              REP(a, N1) REP(b, N2)
                edge[a][b] = (X1[a]-X2[b])*(X1[a]-X2[b])+(Y1[a]-Y2[b])*(Y1[a]-Y2[b])<dl;
              int ile = N1+N2-match();
              best >?= dl/4.*M_PI*ile;
            }
            return best;
  }
 
 
};
 
 
